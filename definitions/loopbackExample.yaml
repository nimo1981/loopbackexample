swagger: '2.0'

info:
  x-ibm-name: loopbackexample
  version: 1.0.0
  title: loopbackExample

schemes:
  - https
host: $(catalog.host)
basePath: /api

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
 clientIdHeader:
   type: apiKey
   in: header
   name: X-IBM-Client-Id
 clientSecretHeader:
   in: "header"
   name: "X-IBM-Client-Secret"
   type: "apiKey"


security:
 -
   clientIdHeader: []
   clientSecretHeader: []

x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)

paths:
  /Customers:
    post:
      tags:
        - Customer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Customer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Customer.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
        - Customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Customer.replaceOrCreate__put_Customers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    get:
      tags:
        - Customer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Customer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/replaceOrCreate:
    post:
      tags:
        - Customer
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Customer.replaceOrCreate__post_Customers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/upsertWithWhere:
    post:
      tags:
        - Customer
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Customer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/exists':
    get:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__get_Customers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Customers/{id}':
    head:
      tags:
        - Customer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Customer.exists__head_Customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Customer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Customer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    put:
      tags:
        - Customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Customer.replaceById__put_Customers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
    delete:
      tags:
        - Customer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Customer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Customer
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Customer.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
        - name: id
          in: path
          description: Customer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  '/Customers/{id}/replace':
    post:
      tags:
        - Customer
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Customer.replaceById__post_Customers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/findOne:
    get:
      tags:
        - Customer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Customer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Customer'
      deprecated: false
  /Customers/update:
    post:
      tags:
        - Customer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Customer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Customer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Customers/count:
    get:
      tags:
        - Customer
      summary: Count instances of the model matched by where from the data source.
      operationId: Customer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Orders:
    post:
      tags:
        - Orders
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Orders.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
    patch:
      tags:
        - Orders
      summary: Patch an existing model instance or insert a new one into the data source.
      operationId: Orders.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
    put:
      tags:
        - Orders
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Orders.replaceOrCreate__put_Orders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
    get:
      tags:
        - Orders
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Orders.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Orders'
      deprecated: false
  /Orders/replaceOrCreate:
    post:
      tags:
        - Orders
      summary: Replace an existing model instance or insert a new one into the data source.
      operationId: Orders.replaceOrCreate__post_Orders_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
  /Orders/upsertWithWhere:
    post:
      tags:
        - Orders
      summary: Update an existing model instance or insert a new one into the data source based on the where criteria.
      operationId: Orders.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
  '/Orders/{id}/exists':
    get:
      tags:
        - Orders
      summary: Check whether a model instance exists in the data source.
      operationId: 'Orders.exists__get_Orders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Orders/{id}':
    head:
      tags:
        - Orders
      summary: Check whether a model instance exists in the data source.
      operationId: 'Orders.exists__head_Orders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Orders
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Orders.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: 'Filter defining fields and include - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
    put:
      tags:
        - Orders
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Orders.replaceById__put_Orders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
    delete:
      tags:
        - Orders
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Orders.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Orders
      summary: Patch attributes for a model instance and persist it into the data source.
      operationId: Orders.prototype.patchAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Orders'
        - name: id
          in: path
          description: Orders id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
  '/Orders/{id}/replace':
    post:
      tags:
        - Orders
      summary: Replace attributes for a model instance and persist it into the data source.
      operationId: 'Orders.replaceById__post_Orders_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
  /Orders/findOne:
    get:
      tags:
        - Orders
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Orders.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({"something":"value"})'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Orders'
      deprecated: false
  /Orders/update:
    post:
      tags:
        - Orders
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Orders.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Orders'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Orders/count:
    get:
      tags:
        - Orders
      summary: Count instances of the model matched by where from the data source.
      operationId: Orders.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false


definitions:
  Customer:
    properties:
      id:
        type: number
        format: double
      name:
        maxLength: 255
        type: string
    required:
      - id
    additionalProperties: false
  x-any:
    properties: {}
  Orders:
    properties:
      id:
        type: number
        format: double
      orderDate:
        type: string
        format: date-time
      deliveryDate:
        type: string
        format: date-time
      customerId:
        type: number
        format: double
    required:
      - id
      - customerId
    additionalProperties: false

